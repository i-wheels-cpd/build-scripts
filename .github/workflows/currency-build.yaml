name: Currency Build

on:
  workflow_dispatch:
    branches:
      - main
      - disck-space
    inputs:
      package_name:
        description: 'Name of the package to build'
        required: true
      version:
        description: 'Version of the package'
        required: true
      validate_build_script:
        description: 'Run build validation script'
        required: true
        default: 'false'
      wheel_build:
        description: 'Create wheel for different Python versions'
        required: true
        default: 'false'
      build_docker:
        description: 'Build docker image'
        required: true
        default: 'false'
      enable_trivy:
        description: 'Enable Trivy scan'
        required: true
        default: 'true'
      enable_syft:
        description: 'Enable Syft scan'
        required: true
        default: 'true'
      enable_grype:
        description: 'Enable Grype scan'
        required: true
        default: 'true'
      unique_id:
        description: 'Unique ID for the build'
        required: false
        default: 'None'

run-name: Currency Build ${{ inputs.package_name }} | Unique ID: ${{ inputs.unique_id }}

jobs:
  ###########################################################################
  # 1. BUILD INFO JOB
  ###########################################################################
  build_info:
    runs-on: ubuntu-24.04
    env:
      PACKAGE_NAME: ${{ inputs.package_name }}
      VERSION: ${{ inputs.version }}
      VALIDATE_BUILD_SCRIPT: ${{ inputs.validate_build_script }}
      WHEEL_BUILD: ${{ inputs.wheel_build }}
      BUILD_DOCKER: ${{ inputs.build_docker }}
      ENABLE_TRIVY: ${{ inputs.enable_trivy }}
      ENABLE_SYFT: ${{ inputs.enable_syft }}
      ENABLE_GRYPE: ${{ inputs.enable_grype }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check initial disk space
        run: |
          df -hT
          df -i
          sudo du -hxd1 / | sort -hr | head -n 20

      - name: Install dependencies
        run: |
          sudo apt update -y
          sudo apt install -y jq file
          pip3 install --force-reinstall -v "requests==2.31.0"
          pip3 install --upgrade docker

      - name: Get Build Info and Save Variables
        run: |
          chmod +x ./gha-script/read_buildinfo.sh
          bash ./gha-script/read_buildinfo.sh

      - name: Show variable.sh
        run: |
          echo "===== variable.sh ====="
          cat variable.sh
          echo "======================="

      - name: Create package-cache & scanner-env.sh
        run: |
          mkdir -p package-cache
          echo "export VALIDATE_BUILD_SCRIPT='${{ inputs.validate_build_script }}'" > scanner-env.sh
          echo "export BUILD_DOCKER='${{ inputs.build_docker }}'" >> scanner-env.sh
          echo "export PACKAGE_NAME='${{ inputs.package_name }}'" >> scanner-env.sh
          echo "===== scanner-env.sh ====="
          cat scanner-env.sh

          mv variable.sh package-cache/
          mv scanner-env.sh package-cache/
          echo "Files moved to package-cache"

      - name: Upload package-cache
        uses: actions/upload-artifact@v4
        with:
          name: package-cache
          path: package-cache

  ###########################################################################
  # 2. BUILD JOB
  ###########################################################################
  build:
    needs: build_info
    if: ${{ inputs.validate_build_script == 'true' }}
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4

      - name: Setup extra storage on /mnt
        run: |
          echo ">>> Using /mnt for builds"
          df -h /mnt
          sudo mkdir -p /mnt/work && sudo chown -R $USER:$USER /mnt/work
          rsync -a $GITHUB_WORKSPACE/ /mnt/work/ws/
          mv $GITHUB_WORKSPACE /tmp/old_ws && ln -s /mnt/work/ws $GITHUB_WORKSPACE

          sudo mkdir -p /mnt/work/docker
          echo '{ "data-root": "/mnt/work/docker" }' | sudo tee /etc/docker/daemon.json
          sudo service docker restart || true
          df -h /mnt

      - name: Download package-cache
        uses: actions/download-artifact@v4
        with:
          name: package-cache
          path: package-cache

      - name: Build Package
        env:
          gha_currency_service_id_api_key_dev: ${{ secrets.GHA_CURRENCY_SERVICE_ID_API_KEY_DEV }}
        run: |
          export TMPDIR=/mnt/work/tmp
          mkdir -p $TMPDIR
          source package-cache/variable.sh
          source package-cache/scanner-env.sh

          chmod +x ./gha-script/build_package.sh
          bash ./gha-script/build_package.sh

          # Fix permissions and move cloned package
          sudo chown -R $USER:$USER package-cache
          sudo chmod -R u+rwX,go+rX,go-w package-cache

          cloned_package=$(ls -td -- */ | head -n 1)
          mv "$cloned_package" package-cache/
          echo "export CLONED_PACKAGE=\"$cloned_package\"" >> package-cache/scanner-env.sh

          cd package-cache
          chmod +x ../gha-script/pre_process.sh
          bash ../gha-script/pre_process.sh
          cd $GITHUB_WORKSPACE

          gzip build_log
          chmod +x ./gha-script/upload-scripts/upload_file.sh
          bash ./gha-script/upload-scripts/upload_file.sh build_log.gz

      - name: Upload updated package-cache
        uses: actions/upload-artifact@v4
        with:
          name: updated-package-cache
          path: package-cache

  ###########################################################################
  # 3. WHEEL BUILD JOB
  ###########################################################################
  wheel_build:
    needs: build_info
    if: ${{ inputs.wheel_build == 'true' }}
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - python-version: "3.9"
            allow-failure: true
          - python-version: "3.10"
            allow-failure: false
          - python-version: "3.11"
            allow-failure: false
          - python-version: "3.12"
            allow-failure: false
          - python-version: "3.13"
            allow-failure: true

    env:
      gha_currency_service_id_api_key_dev: ${{ secrets.GHA_CURRENCY_SERVICE_ID_API_KEY_DEV }}
      PYTHON_VERSION: ${{ matrix.python-version }}
      PACKAGE_NAME: ${{ inputs.package_name }}
      VERSION: ${{ inputs.version }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup extra storage on /mnt
        run: |
          sudo mkdir -p /mnt/work && sudo chown -R $USER:$USER /mnt/work
          rsync -a $GITHUB_WORKSPACE/ /mnt/work/ws/
          mv $GITHUB_WORKSPACE /tmp/old_ws && ln -s /mnt/work/ws $GITHUB_WORKSPACE
          sudo mkdir -p /mnt/work/docker
          echo '{ "data-root": "/mnt/work/docker" }' | sudo tee /etc/docker/daemon.json
          sudo service docker restart || true

      - name: Download package-cache
        uses: actions/download-artifact@v4
        with:
          name: package-cache
          path: package-cache

      - name: Build Wheels
        run: |
          source package-cache/variable.sh
          source package-cache/scanner-env.sh
          chmod +x ./gha-script/build_wheels.sh
          bash ./gha-script/build_wheels.sh
        continue-on-error: ${{ matrix.allow-failure }}

      - name: Upload wheel artifact
        if: ${{ success() }}
        run: |
          if [ -n "${{ secrets.GHA_CURRENCY_SERVICE_ID_API_KEY_DEV }}" ]; then
            export gha_currency_service_id_api_key_dev=${{ secrets.GHA_CURRENCY_SERVICE_ID_API_KEY_DEV }}
            chmod +x ./gha-script/upload-scripts/upload_wheel.sh
            bash ./gha-script/upload-scripts/upload_wheel.sh *.whl
          else
            echo "API key not set, skipping wheel upload"
          fi

  ###########################################################################
  # 4. SOURCE SCANNER
  ###########################################################################
  source_scanner:
    needs: build
    if: ${{ inputs.validate_build_script == 'true' }}
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        scanner: [trivy, syft, grype]

    steps:
      - uses: actions/checkout@v4

      - name: Download updated-package-cache
        uses: actions/download-artifact@v4
        with:
          name: updated-package-cache
          path: package-cache

      - name: Run ${{ matrix.scanner }} Scan
        run: |
          source package-cache/variable.sh
          source package-cache/scanner-env.sh
          chmod +x ./gha-script/scanner-scripts/${{ matrix.scanner }}_code_scan.sh
          bash ./gha-script/scanner-scripts/${{ matrix.scanner }}_code_scan.sh

          mkdir -p source_${{ matrix.scanner }}
          mv package-cache/${{ matrix.scanner }}_source* source_${{ matrix.scanner }}/

      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: source-${{ matrix.scanner }}-results
          path: source_${{ matrix.scanner }}

  ###########################################################################
  # 5. UPLOAD SCANNER RESULTS
  ###########################################################################
  upload_scanner_results:
    needs: source_scanner
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4

      - name: Download all scanner artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-scanner-results

      - name: Download package-cache
        uses: actions/download-artifact@v4
        with:
          name: package-cache
          path: package-cache

      - name: Upload Combined Scanner Results to COS
        env:
          gha_currency_service_id_api_key_dev: ${{ secrets.GHA_CURRENCY_SERVICE_ID_API_KEY_DEV }}
        run: |
          export gha_currency_service_id_api_key_dev
          mkdir -p source
          source package-cache/variable.sh
          source package-cache/scanner-env.sh
          find all-scanner-results -type f -exec cp {} source/ \;
          tar czf source_scanner.tar.gz source
          chmod +x ./gha-script/upload-scripts/upload_file.sh
          bash ./gha-script/upload-scripts/upload_file.sh source_scanner.tar.gz
