name: PR build

on:
  pull_request:
    branches:
      - main

jobs:
  validate:
    runs-on: ubuntu-24.04  # Ensure this self-hosted runner exists

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup extra storage on /mnt
        run: |
          echo ">>> Using /mnt for builds"
          df -h /mnt

          # Create work dir with sudo
          sudo mkdir -p /mnt/work
          sudo chown -R $USER:$USER /mnt/work

          echo ">>> Move workspace to /mnt safely"
          # Use a temp dir to avoid deleting current working dir
          rsync -a $GITHUB_WORKSPACE/ /mnt/work/ws/
          mv $GITHUB_WORKSPACE /tmp/old_ws
          ln -s /mnt/work/ws $GITHUB_WORKSPACE

          echo ">>> Configure Docker to use /mnt (without systemctl)"
          sudo mkdir -p /mnt/work/docker
          sudo chown -R root:root /mnt/work/docker
          echo '{ "data-root": "/mnt/work/docker" }' | sudo tee /etc/docker/daemon.json
          sudo service docker restart || true

          echo ">>> Space after setup"
          df -h /
          df -h /mnt


      - name: Verify workspace is on /mnt
        run: |
          echo ">>> Current workspace: $GITHUB_WORKSPACE"
          ls -ld $GITHUB_WORKSPACE
          echo ">>> Where is workspace actually pointing?"
          readlink -f $GITHUB_WORKSPACE
          echo ">>> Disk usage of workspace:"
          df -hT $GITHUB_WORKSPACE


      - name: Install required packages
        run: |
          sudo apt update -y
          sudo apt-get install -y file

      - name: Install Python dependencies
        run: |
          pip3 install --force-reinstall -v "requests==2.31.0"
          pip3 install --upgrade docker

      - name: Set PR number
        run: echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV

      - name: Run validate_builds.py script with live logs
        run: |
          python3 -u gha-script/validate_builds.py ${PR_NUMBER:-false} 2>&1 | tee build_log
          my_pid_status=${PIPESTATUS[0]}

          build_size=$(stat -c %s build_log)

          if [ "$my_pid_status" -ne 0 ]; then
            echo "Script failed for PR #${PR_NUMBER}"
            if [ "$build_size" -lt 1800000 ]; then
              cat build_log
            else
              echo "Build log too large, showing last 100 lines"
              tail -100 build_log
            fi
            exit 1
          else
            echo "Script completed successfully for PR #${PR_NUMBER}"
            if [ "$build_size" -lt 1800000 ]; then
              cat build_log
            else
              echo "Build log too large, showing last 100 lines"
              tail -100 build_log
            fi
          fi
